apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: monitoring
  namespace: argocd
spec:
  project: default
  source:
    repoURL: https://prometheus-community.github.io/helm-charts
    chart: kube-prometheus-stack
    targetRevision: 75.15.1
    helm:
      values: |
        # ---- Prometheus (unchanged, lean) ----
        prometheus:
          prometheusSpec:
            image:
              registry: quay.io
              repository: prometheus/prometheus
              tag: v2.54.1
              pullPolicy: IfNotPresent
            retention: 3d
            scrapeInterval: 30s
            evaluationInterval: 30s
            serviceMonitorSelectorNilUsesHelmValues: false
            resources:
              requests: { memory: "512Mi", cpu: "200m" }
              limits:   { memory: "1Gi",   cpu: "500m" }
            storageSpec:
              volumeClaimTemplate:
                spec:
                  storageClassName: managed-csi
                  accessModes: ["ReadWriteOnce"]
                  resources:
                    requests:
                      storage: 10Gi
          service:
            type: ClusterIP

        # ---- Alertmanager (unchanged, lean) ----
        alertmanager:
          alertmanagerSpec:
            resources:
              requests: { memory: "100Mi", cpu: "50m" }
              limits:   { memory: "200Mi", cpu: "100m" }
            storage:
              volumeClaimTemplate:
                spec:
                  storageClassName: managed-csi
                  accessModes: ["ReadWriteOnce"]
                  resources:
                    requests:
                      storage: 5Gi

        # ---- Grafana (minimal & fast) ----
        grafana:
          replicas: 1
          admin:
            existingSecret: grafana-admin
            userKey: admin-user
            passwordKey: admin-password
          persistence:
            enabled: false            # <- no PVC; avoids sqlite locks, fastest boot
          service:
            type: ClusterIP
          ingress:
            enabled: false
          plugins: []                 # <- no plugin CM/env
          env: {}                     # <- do not set GF_* vars; keep it clean
          grafana.ini:                # <- minimal, **no security section** (no inline secrets)
            log:
              mode: console
            analytics:
              check_for_updates: true
            paths:
              data: /var/lib/grafana
              logs: /var/log/grafana
              plugins: /var/lib/grafana/plugins
              provisioning: /etc/grafana/provisioning
          sidecar:
            dashboards: { enabled: false }
            datasources: { enabled: false }

        # ---- Node Exporter safe default ----
        prometheus-node-exporter:
          hostRootFsMount:
            enabled: false

        # ---- Operator small footprint ----
        prometheusOperator:
          resources:
            requests: { memory: "100Mi", cpu: "100m" }
            limits:   { memory: "200Mi", cpu: "200m" }

  destination:
    server: https://kubernetes.default.svc
    namespace: monitoring
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - SkipDryRunOnMissingResource=true
      - ServerSideApply=true
      - PruneLast=true
  ignoreDifferences:
    - group: monitoring.coreos.com
      kind: Prometheus
      jsonPointers: ["/status"]
    - group: monitoring.coreos.com
      kind: Alertmanager
      jsonPointers: ["/status"]
    - group: monitoring.coreos.com
      kind: PrometheusRule
      jqPathExpressions:
        - .spec.groups[].rules[].annotations
